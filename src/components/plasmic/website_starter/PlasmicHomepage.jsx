// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tQ4uKe7Uas9vGGmz8rwqFD
// Component: RnFvAGu6j-dUC
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  usePlasmicDataConfig,
  executePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: 4UjLGoDFJWI/component
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: RW4q13RFtAd/codeComponent
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: RW4q13RFtAd/codeComponentHelper
import Button from "../../Button"; // plasmic-import: 3cFA07Ea6yM/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_website_starter.module.css"; // plasmic-import: tQ4uKe7Uas9vGGmz8rwqFD/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: RnFvAGu6j-dUC/css
import ShapeIcon from "./icons/PlasmicIcon__Shape"; // plasmic-import: LXrY-bcVA3/icon
import Shape2Icon from "./icons/PlasmicIcon__Shape2"; // plasmic-import: yWV16ChGcG/icon
import Shape3Icon from "./icons/PlasmicIcon__Shape3"; // plasmic-import: e8msfOhudc/icon
import Shape4Icon from "./icons/PlasmicIcon__Shape4"; // plasmic-import: HuSxt3bKEP/icon
import Shape5Icon from "./icons/PlasmicIcon__Shape5"; // plasmic-import: chrsjN_pJD/icon
import Shape6Icon from "./icons/PlasmicIcon__Shape6"; // plasmic-import: HwWk3Yk6XY/icon
import Shape7Icon from "./icons/PlasmicIcon__Shape7"; // plasmic-import: wnu4MDbd4M/icon
import Shape8Icon from "./icons/PlasmicIcon__Shape8"; // plasmic-import: cYafWHlRIi/icon
import Shape9Icon from "./icons/PlasmicIcon__Shape9"; // plasmic-import: QJEQkZJKKt/icon
import LineDividerIcon from "./icons/PlasmicIcon__LineDivider"; // plasmic-import: h0uw2C5oMT/icon
import Group778Icon from "./icons/PlasmicIcon__Group778"; // plasmic-import: Eed4W38b2M/icon
import carouselSliderIDEkqZq2Wq from "./images/carouselSlider.svg"; // plasmic-import: iDEkqZQ2Wq/picture
import path1929FlEwEv7LL from "./images/path1929.svg"; // plasmic-import: FlEwEv7L-L/picture

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdPassword_Helpers)
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );

  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const { cache, mutate: swrMutate } = usePlasmicDataConfig();
  const mutate = swrMutate;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"template1LogIn"}
            data-plasmic-override={overrides.template1LogIn}
            className={classNames(projectcss.all, sty.template1LogIn)}
          >
            <div
              data-plasmic-name={"bgImg"}
              data-plasmic-override={overrides.bgImg}
              className={classNames(projectcss.all, sty.bgImg)}
            />

            <div
              data-plasmic-name={"bgOverlay"}
              data-plasmic-override={overrides.bgOverlay}
              className={classNames(projectcss.all, sty.bgOverlay)}
            />

            <div
              data-plasmic-name={"divSection"}
              data-plasmic-override={overrides.divSection}
              className={classNames(projectcss.all, sty.divSection)}
            >
              <div
                data-plasmic-name={"group"}
                data-plasmic-override={overrides.group}
                className={classNames(projectcss.all, sty.group)}
              >
                <div
                  data-plasmic-name={"mainDiv"}
                  data-plasmic-override={overrides.mainDiv}
                  className={classNames(projectcss.all, sty.mainDiv)}
                />
              </div>
              <div
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames(projectcss.all, sty.header)}
              >
                <div
                  data-plasmic-name={"letsGetYouStarted"}
                  data-plasmic-override={overrides.letsGetYouStarted}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.letsGetYouStarted
                  )}
                >
                  {"WELCOME BACK"}
                </div>
                <div
                  data-plasmic-name={"createAnAccount"}
                  data-plasmic-override={overrides.createAnAccount}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.createAnAccount
                  )}
                >
                  {"Log In to your Account"}
                </div>
              </div>
              <p.Stack
                as={"div"}
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                hasGap={true}
                action={``}
                className={classNames(projectcss.all, sty.form)}
                method={``}
              >
                <div
                  data-plasmic-name={"group5"}
                  data-plasmic-override={overrides.group5}
                  className={classNames(projectcss.all, sty.group5)}
                >
                  <div
                    data-plasmic-name={"inputCopy"}
                    data-plasmic-override={overrides.inputCopy}
                    className={classNames(projectcss.all, sty.inputCopy)}
                  >
                    <div
                      data-plasmic-name={"input"}
                      data-plasmic-override={overrides.input}
                      className={classNames(projectcss.all, sty.input)}
                    >
                      <TextInput
                        data-plasmic-name={"textInput"}
                        data-plasmic-override={overrides.textInput}
                        className={classNames("__wab_instance", sty.textInput)}
                        name={"email"}
                        onChange={(...eventArgs) => {
                          p.generateStateOnChangeProp($state, [
                            "textInput",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }}
                        placeholder={"username"}
                        type={"text"}
                        value={
                          p.generateStateValueProp($state, [
                            "textInput",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                    <div
                      data-plasmic-name={"label"}
                      data-plasmic-override={overrides.label}
                      className={classNames(projectcss.all, sty.label)}
                    >
                      <div
                        data-plasmic-name={"divider"}
                        data-plasmic-override={overrides.divider}
                        className={classNames(projectcss.all, sty.divider)}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fItzy
                        )}
                      >
                        {"Email"}
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"inputCopy2"}
                    data-plasmic-override={overrides.inputCopy2}
                    className={classNames(projectcss.all, sty.inputCopy2)}
                  >
                    <div
                      data-plasmic-name={"input2"}
                      data-plasmic-override={overrides.input2}
                      className={classNames(projectcss.all, sty.input2)}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.passwordInput
                          ),

                          disabled: false,
                          onChange: async (...eventArgs) => {
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["passwordInput", "value"],
                              AntdPassword_Helpers
                            ).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};
                              $steps["updatePasswordInputValue"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "cz8lx5SJD",
                                          componentUuid: "RnFvAGu6j-dUC",
                                          argName: "variable"
                                        },
                                        () => ({
                                          objRoot: $state,
                                          variablePath: [
                                            "passwordInput",
                                            "value"
                                          ]
                                        })
                                      ),

                                      operation: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "cz8lx5SJD",
                                          componentUuid: "RnFvAGu6j-dUC",
                                          argName: "operation"
                                        },
                                        () => 0
                                      )
                                    };
                                    return __wrapUserFunction(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "updateVariable",
                                        interactionUuid: "cz8lx5SJD",
                                        componentUuid: "RnFvAGu6j-dUC"
                                      },
                                      () =>
                                        (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;
                                          p.set(objRoot, variablePath, value);
                                          return value;
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    );
                                  })()
                                : undefined;
                              if (
                                typeof $steps["updatePasswordInputValue"] ===
                                  "object" &&
                                typeof $steps["updatePasswordInputValue"]
                                  .then === "function"
                              ) {
                                $steps["updatePasswordInputValue"] =
                                  await __wrapUserPromise(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "cz8lx5SJD",
                                      componentUuid: "RnFvAGu6j-dUC"
                                    },
                                    $steps["updatePasswordInputValue"]
                                  );
                              }
                            }).apply(null, eventArgs);
                          },
                          placeholder: "password",
                          value: p.generateStateValueProp($state, [
                            "passwordInput",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "passwordInput.value"
                            }
                          ],

                          [],
                          AntdPassword_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdPassword
                            data-plasmic-name={"passwordInput"}
                            data-plasmic-override={overrides.passwordInput}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                    <div
                      data-plasmic-name={"exIconeye"}
                      data-plasmic-override={overrides.exIconeye}
                      className={classNames(projectcss.all, sty.exIconeye)}
                    >
                      <div
                        data-plasmic-name={"eye"}
                        data-plasmic-override={overrides.eye}
                        className={classNames(projectcss.all, sty.eye)}
                      >
                        <ShapeIcon
                          className={classNames(projectcss.all, sty.svg__ner61)}
                          role={"img"}
                        />

                        <Shape2Icon
                          className={classNames(projectcss.all, sty.svg__ypVer)}
                          role={"img"}
                        />
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"label2"}
                      data-plasmic-override={overrides.label2}
                      className={classNames(projectcss.all, sty.label2)}
                    >
                      <div
                        data-plasmic-name={"divider2"}
                        data-plasmic-override={overrides.divider2}
                        className={classNames(projectcss.all, sty.divider2)}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rQEnt
                        )}
                      >
                        {"Password"}
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnPrytemplate1"}
                  data-plasmic-override={overrides.btnPrytemplate1}
                  className={classNames(projectcss.all, sty.btnPrytemplate1)}
                >
                  <div
                    data-plasmic-name={"getStarted"}
                    data-plasmic-override={overrides.getStarted}
                    className={classNames(projectcss.all, sty.getStarted)}
                  >
                    {true ? (
                      <Button
                        data-plasmic-name={"login"}
                        data-plasmic-override={overrides.login}
                        className={classNames("__wab_instance", sty.login)}
                        color={"blue"}
                        onClick={async event => {
                          const $steps = {};
                          $steps["httpPost"] = true
                            ? (() => {
                                const actionArgs = {};
                                return __wrapUserFunction(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "dataSourceOp",
                                    interactionUuid: "KvidkaBkX",
                                    componentUuid: "RnFvAGu6j-dUC"
                                  },
                                  () =>
                                    (async ({ dataOp, continueOnError }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        if (
                                          dataOp.invalidatedKeys &&
                                          dataOp.invalidatedKeys.find(
                                            key => key === "plasmic_refresh_all"
                                          )
                                        ) {
                                          await Promise.all(
                                            Array.from(cache.keys()).map(
                                              async key => mutate(key)
                                            )
                                          );

                                          return response;
                                        }
                                        if (dataOp.invalidatedKeys) {
                                          await Promise.all(
                                            dataOp.invalidatedKeys.map(
                                              async invalidateKey =>
                                                Promise.all(
                                                  Array.from(cache.keys()).map(
                                                    async key => {
                                                      if (
                                                        typeof key ===
                                                          "string" &&
                                                        key.includes(
                                                          `.$.${invalidateKey}.$.`
                                                        )
                                                      ) {
                                                        return mutate(key);
                                                      }
                                                      return Promise.resolve();
                                                    }
                                                  )
                                                )
                                            )
                                          );
                                        }
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]),
                                  actionArgs
                                );
                              })()
                            : undefined;
                          if (
                            typeof $steps["httpPost"] === "object" &&
                            typeof $steps["httpPost"].then === "function"
                          ) {
                            $steps["httpPost"] = await __wrapUserPromise(
                              {
                                type: "InteractionLoc",
                                actionName: "dataSourceOp",
                                interactionUuid: "KvidkaBkX",
                                componentUuid: "RnFvAGu6j-dUC"
                              },
                              $steps["httpPost"]
                            );
                          }
                          $steps["goToCommerceLanding"] = $steps.httpPost
                            ? (() => {
                                const actionArgs = {
                                  destination: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "navigation",
                                      interactionUuid: "ErHikjEXO",
                                      componentUuid: "RnFvAGu6j-dUC",
                                      argName: "destination"
                                    },
                                    () => `/new-page`
                                  )
                                };
                                return __wrapUserFunction(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "navigation",
                                    interactionUuid: "ErHikjEXO",
                                    componentUuid: "RnFvAGu6j-dUC"
                                  },
                                  () =>
                                    (({ destination }) => {
                                      location.assign(destination);
                                    })?.apply(null, [actionArgs]),
                                  actionArgs
                                );
                              })()
                            : undefined;
                          if (
                            typeof $steps["goToCommerceLanding"] === "object" &&
                            typeof $steps["goToCommerceLanding"].then ===
                              "function"
                          ) {
                            $steps["goToCommerceLanding"] =
                              await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "navigation",
                                  interactionUuid: "ErHikjEXO",
                                  componentUuid: "RnFvAGu6j-dUC"
                                },
                                $steps["goToCommerceLanding"]
                              );
                          }
                        }}
                        shape={"rounded"}
                        size={"compact"}
                        submitsForm={false}
                      >
                        {"login"}
                      </Button>
                    ) : null}
                  </div>
                </div>
              </p.Stack>
              <p.Stack
                as={"div"}
                data-plasmic-name={"btnOutlinevertical"}
                data-plasmic-override={overrides.btnOutlinevertical}
                hasGap={true}
                className={classNames(projectcss.all, sty.btnOutlinevertical)}
              >
                <div
                  data-plasmic-name={"btnOutlinetemplate1Copy"}
                  data-plasmic-override={overrides.btnOutlinetemplate1Copy}
                  className={classNames(
                    projectcss.all,
                    sty.btnOutlinetemplate1Copy
                  )}
                >
                  <div
                    data-plasmic-name={"rectangle3"}
                    data-plasmic-override={overrides.rectangle3}
                    className={classNames(projectcss.all, sty.rectangle3)}
                  />

                  <div
                    data-plasmic-name={"signUpWithGoogle"}
                    data-plasmic-override={overrides.signUpWithGoogle}
                    className={classNames(projectcss.all, sty.signUpWithGoogle)}
                  >
                    <div
                      data-plasmic-name={"signUpWithGoogle2"}
                      data-plasmic-override={overrides.signUpWithGoogle2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.signUpWithGoogle2
                      )}
                    >
                      {"Log In with Google"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"icons8Google"}
                    data-plasmic-override={overrides.icons8Google}
                    className={classNames(projectcss.all, sty.icons8Google)}
                  >
                    <Shape3Icon
                      className={classNames(projectcss.all, sty.svg__cew3H)}
                      role={"img"}
                    />

                    <Shape4Icon
                      className={classNames(projectcss.all, sty.svg___9AYbf)}
                      role={"img"}
                    />

                    <Shape5Icon
                      className={classNames(projectcss.all, sty.svg__jd42)}
                      role={"img"}
                    />

                    <Shape6Icon
                      className={classNames(projectcss.all, sty.svg__gqnJj)}
                      role={"img"}
                    />
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnOutlinetemplate1Copy2"}
                  data-plasmic-override={overrides.btnOutlinetemplate1Copy2}
                  className={classNames(
                    projectcss.all,
                    sty.btnOutlinetemplate1Copy2
                  )}
                >
                  <div
                    data-plasmic-name={"rectangle4"}
                    data-plasmic-override={overrides.rectangle4}
                    className={classNames(projectcss.all, sty.rectangle4)}
                  />

                  <div
                    data-plasmic-name={"icons8Facebook"}
                    data-plasmic-override={overrides.icons8Facebook}
                    className={classNames(projectcss.all, sty.icons8Facebook)}
                  >
                    <Shape7Icon
                      className={classNames(projectcss.all, sty.svg__sYtdC)}
                      role={"img"}
                    />

                    <Shape8Icon
                      className={classNames(projectcss.all, sty.svg__qo8CX)}
                      role={"img"}
                    />
                  </div>
                  <div
                    data-plasmic-name={"signUpWithFacebook"}
                    data-plasmic-override={overrides.signUpWithFacebook}
                    className={classNames(
                      projectcss.all,
                      sty.signUpWithFacebook
                    )}
                  >
                    <div
                      data-plasmic-name={"signUpWithFacebook2"}
                      data-plasmic-override={overrides.signUpWithFacebook2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.signUpWithFacebook2
                      )}
                    >
                      {"Log In with Facebook"}
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnOutlinetemplate1Copy3"}
                  data-plasmic-override={overrides.btnOutlinetemplate1Copy3}
                  className={classNames(
                    projectcss.all,
                    sty.btnOutlinetemplate1Copy3
                  )}
                >
                  <div
                    data-plasmic-name={"rectangle5"}
                    data-plasmic-override={overrides.rectangle5}
                    className={classNames(projectcss.all, sty.rectangle5)}
                  />

                  <div
                    data-plasmic-name={"signUpWithApple"}
                    data-plasmic-override={overrides.signUpWithApple}
                    className={classNames(projectcss.all, sty.signUpWithApple)}
                  >
                    <div
                      data-plasmic-name={"signUpWithApple2"}
                      data-plasmic-override={overrides.signUpWithApple2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.signUpWithApple2
                      )}
                    >
                      {"Log In with Apple"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"apple"}
                    data-plasmic-override={overrides.apple}
                    className={classNames(projectcss.all, sty.apple)}
                  >
                    <Shape9Icon
                      className={classNames(projectcss.all, sty.svg__msHRn)}
                      role={"img"}
                    />
                  </div>
                </div>
              </p.Stack>
              <div
                data-plasmic-name={"dividerLabel"}
                data-plasmic-override={overrides.dividerLabel}
                className={classNames(projectcss.all, sty.dividerLabel)}
              >
                <LineDividerIcon
                  className={classNames(projectcss.all, sty.svg__oo65L)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"dividerBg"}
                  data-plasmic-override={overrides.dividerBg}
                  className={classNames(projectcss.all, sty.dividerBg)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__shSvF
                  )}
                >
                  {"Or"}
                </div>
              </div>
              <div
                data-plasmic-name={"alreadyHaveAnAccountLogin"}
                data-plasmic-override={overrides.alreadyHaveAnAccountLogin}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.alreadyHaveAnAccountLogin
                )}
              >
                {"New User? SIGN UP HERE"}
              </div>
            </div>
            <p.Stack
              as={"div"}
              data-plasmic-name={"slide"}
              data-plasmic-override={overrides.slide}
              hasGap={true}
              className={classNames(projectcss.all, sty.slide)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"header2"}
                data-plasmic-override={overrides.header2}
                hasGap={true}
                className={classNames(projectcss.all, sty.header2)}
              >
                <div
                  data-plasmic-name={"buildingTheFuture"}
                  data-plasmic-override={overrides.buildingTheFuture}
                  className={classNames(projectcss.all, sty.buildingTheFuture)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xWTaY
                    )}
                  >
                    {"Building the Future..."}
                  </div>
                </div>
                <div
                  data-plasmic-name={"loremIpsumDolorSitAmetCo"}
                  data-plasmic-override={overrides.loremIpsumDolorSitAmetCo}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.loremIpsumDolorSitAmetCo
                  )}
                >
                  {
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. "
                  }
                </div>
              </p.Stack>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__nh8W9)}
                displayHeight={"2px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"133.5px"}
                loading={"lazy"}
                src={{
                  src: carouselSliderIDEkqZq2Wq,
                  fullWidth: 133.5,
                  fullHeight: 2,
                  aspectRatio: 22.333333
                }}
              />
            </p.Stack>
            <div
              data-plasmic-name={"logohighbridge"}
              data-plasmic-override={overrides.logohighbridge}
              className={classNames(projectcss.all, sty.logohighbridge)}
            >
              <div
                data-plasmic-name={"group779"}
                data-plasmic-override={overrides.group779}
                className={classNames(projectcss.all, sty.group779)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__hmScy)}
                  displayHeight={"64px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"65px"}
                  loading={"lazy"}
                  src={{
                    src: path1929FlEwEv7LL,
                    fullWidth: 65,
                    fullHeight: 64,
                    aspectRatio: 1.015625
                  }}
                />

                <Group778Icon
                  className={classNames(projectcss.all, sty.svg__cw4Ci)}
                  role={"img"}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "template1LogIn",
    "bgImg",
    "bgOverlay",
    "divSection",
    "group",
    "mainDiv",
    "header",
    "letsGetYouStarted",
    "createAnAccount",
    "form",
    "group5",
    "inputCopy",
    "input",
    "textInput",
    "label",
    "divider",
    "inputCopy2",
    "input2",
    "passwordInput",
    "exIconeye",
    "eye",
    "label2",
    "divider2",
    "btnPrytemplate1",
    "getStarted",
    "login",
    "btnOutlinevertical",
    "btnOutlinetemplate1Copy",
    "rectangle3",
    "signUpWithGoogle",
    "signUpWithGoogle2",
    "icons8Google",
    "btnOutlinetemplate1Copy2",
    "rectangle4",
    "icons8Facebook",
    "signUpWithFacebook",
    "signUpWithFacebook2",
    "btnOutlinetemplate1Copy3",
    "rectangle5",
    "signUpWithApple",
    "signUpWithApple2",
    "apple",
    "dividerLabel",
    "dividerBg",
    "alreadyHaveAnAccountLogin",
    "slide",
    "header2",
    "buildingTheFuture",
    "loremIpsumDolorSitAmetCo",
    "logohighbridge",
    "group779"
  ],

  template1LogIn: [
    "template1LogIn",
    "bgImg",
    "bgOverlay",
    "divSection",
    "group",
    "mainDiv",
    "header",
    "letsGetYouStarted",
    "createAnAccount",
    "form",
    "group5",
    "inputCopy",
    "input",
    "textInput",
    "label",
    "divider",
    "inputCopy2",
    "input2",
    "passwordInput",
    "exIconeye",
    "eye",
    "label2",
    "divider2",
    "btnPrytemplate1",
    "getStarted",
    "login",
    "btnOutlinevertical",
    "btnOutlinetemplate1Copy",
    "rectangle3",
    "signUpWithGoogle",
    "signUpWithGoogle2",
    "icons8Google",
    "btnOutlinetemplate1Copy2",
    "rectangle4",
    "icons8Facebook",
    "signUpWithFacebook",
    "signUpWithFacebook2",
    "btnOutlinetemplate1Copy3",
    "rectangle5",
    "signUpWithApple",
    "signUpWithApple2",
    "apple",
    "dividerLabel",
    "dividerBg",
    "alreadyHaveAnAccountLogin",
    "slide",
    "header2",
    "buildingTheFuture",
    "loremIpsumDolorSitAmetCo",
    "logohighbridge",
    "group779"
  ],

  bgImg: ["bgImg"],
  bgOverlay: ["bgOverlay"],
  divSection: [
    "divSection",
    "group",
    "mainDiv",
    "header",
    "letsGetYouStarted",
    "createAnAccount",
    "form",
    "group5",
    "inputCopy",
    "input",
    "textInput",
    "label",
    "divider",
    "inputCopy2",
    "input2",
    "passwordInput",
    "exIconeye",
    "eye",
    "label2",
    "divider2",
    "btnPrytemplate1",
    "getStarted",
    "login",
    "btnOutlinevertical",
    "btnOutlinetemplate1Copy",
    "rectangle3",
    "signUpWithGoogle",
    "signUpWithGoogle2",
    "icons8Google",
    "btnOutlinetemplate1Copy2",
    "rectangle4",
    "icons8Facebook",
    "signUpWithFacebook",
    "signUpWithFacebook2",
    "btnOutlinetemplate1Copy3",
    "rectangle5",
    "signUpWithApple",
    "signUpWithApple2",
    "apple",
    "dividerLabel",
    "dividerBg",
    "alreadyHaveAnAccountLogin"
  ],

  group: ["group", "mainDiv"],
  mainDiv: ["mainDiv"],
  header: ["header", "letsGetYouStarted", "createAnAccount"],
  letsGetYouStarted: ["letsGetYouStarted"],
  createAnAccount: ["createAnAccount"],
  form: [
    "form",
    "group5",
    "inputCopy",
    "input",
    "textInput",
    "label",
    "divider",
    "inputCopy2",
    "input2",
    "passwordInput",
    "exIconeye",
    "eye",
    "label2",
    "divider2",
    "btnPrytemplate1",
    "getStarted",
    "login"
  ],

  group5: [
    "group5",
    "inputCopy",
    "input",
    "textInput",
    "label",
    "divider",
    "inputCopy2",
    "input2",
    "passwordInput",
    "exIconeye",
    "eye",
    "label2",
    "divider2"
  ],

  inputCopy: ["inputCopy", "input", "textInput", "label", "divider"],
  input: ["input", "textInput"],
  textInput: ["textInput"],
  label: ["label", "divider"],
  divider: ["divider"],
  inputCopy2: [
    "inputCopy2",
    "input2",
    "passwordInput",
    "exIconeye",
    "eye",
    "label2",
    "divider2"
  ],

  input2: ["input2", "passwordInput"],
  passwordInput: ["passwordInput"],
  exIconeye: ["exIconeye", "eye"],
  eye: ["eye"],
  label2: ["label2", "divider2"],
  divider2: ["divider2"],
  btnPrytemplate1: ["btnPrytemplate1", "getStarted", "login"],
  getStarted: ["getStarted", "login"],
  login: ["login"],
  btnOutlinevertical: [
    "btnOutlinevertical",
    "btnOutlinetemplate1Copy",
    "rectangle3",
    "signUpWithGoogle",
    "signUpWithGoogle2",
    "icons8Google",
    "btnOutlinetemplate1Copy2",
    "rectangle4",
    "icons8Facebook",
    "signUpWithFacebook",
    "signUpWithFacebook2",
    "btnOutlinetemplate1Copy3",
    "rectangle5",
    "signUpWithApple",
    "signUpWithApple2",
    "apple"
  ],

  btnOutlinetemplate1Copy: [
    "btnOutlinetemplate1Copy",
    "rectangle3",
    "signUpWithGoogle",
    "signUpWithGoogle2",
    "icons8Google"
  ],

  rectangle3: ["rectangle3"],
  signUpWithGoogle: ["signUpWithGoogle", "signUpWithGoogle2"],
  signUpWithGoogle2: ["signUpWithGoogle2"],
  icons8Google: ["icons8Google"],
  btnOutlinetemplate1Copy2: [
    "btnOutlinetemplate1Copy2",
    "rectangle4",
    "icons8Facebook",
    "signUpWithFacebook",
    "signUpWithFacebook2"
  ],

  rectangle4: ["rectangle4"],
  icons8Facebook: ["icons8Facebook"],
  signUpWithFacebook: ["signUpWithFacebook", "signUpWithFacebook2"],
  signUpWithFacebook2: ["signUpWithFacebook2"],
  btnOutlinetemplate1Copy3: [
    "btnOutlinetemplate1Copy3",
    "rectangle5",
    "signUpWithApple",
    "signUpWithApple2",
    "apple"
  ],

  rectangle5: ["rectangle5"],
  signUpWithApple: ["signUpWithApple", "signUpWithApple2"],
  signUpWithApple2: ["signUpWithApple2"],
  apple: ["apple"],
  dividerLabel: ["dividerLabel", "dividerBg"],
  dividerBg: ["dividerBg"],
  alreadyHaveAnAccountLogin: ["alreadyHaveAnAccountLogin"],
  slide: ["slide", "header2", "buildingTheFuture", "loremIpsumDolorSitAmetCo"],
  header2: ["header2", "buildingTheFuture", "loremIpsumDolorSitAmetCo"],
  buildingTheFuture: ["buildingTheFuture"],
  loremIpsumDolorSitAmetCo: ["loremIpsumDolorSitAmetCo"],
  logohighbridge: ["logohighbridge", "group779"],
  group779: ["group779"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <p.PlasmicPageGuard
      minRole={"b7ba8aa3-0577-4f45-8326-0e00cd4a32ec"}
      appId={"tQ4uKe7Uas9vGGmz8rwqFD"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    template1LogIn: makeNodeComponent("template1LogIn"),
    bgImg: makeNodeComponent("bgImg"),
    bgOverlay: makeNodeComponent("bgOverlay"),
    divSection: makeNodeComponent("divSection"),
    group: makeNodeComponent("group"),
    mainDiv: makeNodeComponent("mainDiv"),
    header: makeNodeComponent("header"),
    letsGetYouStarted: makeNodeComponent("letsGetYouStarted"),
    createAnAccount: makeNodeComponent("createAnAccount"),
    form: makeNodeComponent("form"),
    group5: makeNodeComponent("group5"),
    inputCopy: makeNodeComponent("inputCopy"),
    input: makeNodeComponent("input"),
    textInput: makeNodeComponent("textInput"),
    label: makeNodeComponent("label"),
    divider: makeNodeComponent("divider"),
    inputCopy2: makeNodeComponent("inputCopy2"),
    input2: makeNodeComponent("input2"),
    passwordInput: makeNodeComponent("passwordInput"),
    exIconeye: makeNodeComponent("exIconeye"),
    eye: makeNodeComponent("eye"),
    label2: makeNodeComponent("label2"),
    divider2: makeNodeComponent("divider2"),
    btnPrytemplate1: makeNodeComponent("btnPrytemplate1"),
    getStarted: makeNodeComponent("getStarted"),
    login: makeNodeComponent("login"),
    btnOutlinevertical: makeNodeComponent("btnOutlinevertical"),
    btnOutlinetemplate1Copy: makeNodeComponent("btnOutlinetemplate1Copy"),
    rectangle3: makeNodeComponent("rectangle3"),
    signUpWithGoogle: makeNodeComponent("signUpWithGoogle"),
    signUpWithGoogle2: makeNodeComponent("signUpWithGoogle2"),
    icons8Google: makeNodeComponent("icons8Google"),
    btnOutlinetemplate1Copy2: makeNodeComponent("btnOutlinetemplate1Copy2"),
    rectangle4: makeNodeComponent("rectangle4"),
    icons8Facebook: makeNodeComponent("icons8Facebook"),
    signUpWithFacebook: makeNodeComponent("signUpWithFacebook"),
    signUpWithFacebook2: makeNodeComponent("signUpWithFacebook2"),
    btnOutlinetemplate1Copy3: makeNodeComponent("btnOutlinetemplate1Copy3"),
    rectangle5: makeNodeComponent("rectangle5"),
    signUpWithApple: makeNodeComponent("signUpWithApple"),
    signUpWithApple2: makeNodeComponent("signUpWithApple2"),
    apple: makeNodeComponent("apple"),
    dividerLabel: makeNodeComponent("dividerLabel"),
    dividerBg: makeNodeComponent("dividerBg"),
    alreadyHaveAnAccountLogin: makeNodeComponent("alreadyHaveAnAccountLogin"),
    slide: makeNodeComponent("slide"),
    header2: makeNodeComponent("header2"),
    buildingTheFuture: makeNodeComponent("buildingTheFuture"),
    loremIpsumDolorSitAmetCo: makeNodeComponent("loremIpsumDolorSitAmetCo"),
    logohighbridge: makeNodeComponent("logohighbridge"),
    group779: makeNodeComponent("group779"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
